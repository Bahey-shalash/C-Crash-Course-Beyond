/*  
    Lesson 1: Introduction to Constructors

    What is a Constructor?
    ----------------------
    A constructor is a special member function that is automatically called 
    when an object of a class is created.

    Properties of Constructors:
    - Has the same name as the class
    - No return type (not even `void`)
    - Automatically executed when an object is instantiated
    - Can be overloaded (multiple constructors with different parameters)
    - Can have default values assigned to attributes

    The Default Constructor:
    -------------------------
    - A **default constructor** is a constructor that takes **no parameters**.
    - If no constructor is explicitly defined, C++ provides an **implicit default constructor**.
    - However, if **any constructor** (default or parameterized) is explicitly defined, 
      **the compiler does NOT provide an implicit default constructor anymore**.
*/

#include <iostream>

/*  
    1. Implicit Default Constructor (Generated by Compiler)
    -------------------------------------------------------
    - If a class does not define any constructor, the compiler generates a default constructor.
*/

class Car {
public:
    std::string brand;  // Uninitialized by default

    // No constructor defined, so the compiler provides one
    void show() {
        std::cout << "Car brand: " << brand << std::endl;
    }
};

void test_implicit_default_constructor() {
    Car myCar;  // Compiler-generated constructor runs
    myCar.show();
}

/*
    Expected Output:
    ----------------
    Car brand: (garbage value)

    Explanation:
    - Since we did not define a constructor, C++ provides a default constructor automatically.
    - However, the attribute `brand` is uninitialized and contains garbage data.
*/


/*  
    2. Explicitly Defining a Default Constructor
    --------------------------------------------
    - If we define a default constructor, we control how attributes are initialized.
*/

class Bike {
private:
    std::string brand;  

public:
    // Default Constructor (Implemented inside the class)
    Bike() {
        brand = "Unknown";
        std::cout << "Bike object created with default constructor." << std::endl;
    }

    void show() {
        std::cout << "Bike brand: " << brand << std::endl;
    }
};

void test_explicit_default_constructor() {
    Bike myBike;
    myBike.show();
}

/*
    Expected Output:
    ----------------
    Bike object created with default constructor.
    Bike brand: Unknown

    Explanation:
    - Since we explicitly defined a default constructor, the brand is now initialized.
*/


/*  
    3. Effect of Defining Any Constructor (Default Constructor Removal)
    -------------------------------------------------------------------
    - If we define **any** constructor, the compiler no longer provides a default constructor.
*/

class Laptop {
private:
    std::string brand;
    int ram;

public:
    // Parameterized Constructor (Implemented outside the class)
    Laptop(std::string laptopBrand, int laptopRam);

    void show();
};

// Constructor definition outside the class
Laptop::Laptop(std::string laptopBrand, int laptopRam) {
    brand = laptopBrand;
    ram = laptopRam;
    std::cout << "Laptop object created! Brand: " << brand << ", RAM: " << ram << "GB" << std::endl;
}

// Member function definition outside the class
void Laptop::show() {
    std::cout << "Laptop: " << brand << ", RAM: " << ram << "GB" << std::endl;
}

void test_parameterized_constructor() {
    Laptop laptop1("Dell", 16);    // Works fine (calls the parameterized constructor)
    
    // Laptop laptop2; ❌ ERROR: No default constructor available!
}

/*
    Expected Output:
    ----------------
    Laptop object created! Brand: Dell, RAM: 16GB
    Laptop: Dell, RAM: 16GB

    Explanation:
    - Since we defined a parameterized constructor, the **compiler no longer provides a default constructor**.
    - If we try to create `Laptop laptop2;`, it results in a compilation error.
*/


/*  
    4. Restoring the Default Constructor Explicitly
    -----------------------------------------------
    - To allow both default and parameterized constructors, we must define both explicitly.
*/

class Truck {
private:
    std::string brand = "Unknown";
    int capacity = 0;

public:
    // Default Constructor (Implemented inside the class)
    Truck() {
        std::cout << "Default constructor called for Truck!" << std::endl;
    }

    // Parameterized Constructor (Implemented outside the class)
    Truck(std::string truckBrand, int truckCapacity);

    void show();
};

// Constructor definition outside the class
Truck::Truck(std::string truckBrand, int truckCapacity) {
    brand = truckBrand;
    capacity = truckCapacity;
    std::cout << "Parameterized constructor called! Brand: " << brand << ", Capacity: " << capacity << " tons" << std::endl;
}

// Member function definition outside the class
void Truck::show() {
    std::cout << "Truck: " << brand << ", Capacity: " << capacity << " tons" << std::endl;
}

void test_constructor_overloading() {
    Truck truck1;                  // Calls default constructor
    Truck truck2("Volvo", 20);      // Calls parameterized constructor

    truck1.show();
    truck2.show();
}

/*
    Expected Output:
    ----------------
    Default constructor called for Truck!
    Truck: Unknown, Capacity: 0 tons
    Parameterized constructor called! Brand: Volvo, Capacity: 20 tons
    Truck: Volvo, Capacity: 20 tons

    Explanation:
    - Since we explicitly defined **both** constructors, objects can be created using either one.
*/


/*  
    Summary:
    - If no constructor is defined, C++ automatically provides a default constructor.
    - If **any** constructor is defined (e.g., a parameterized constructor), the **compiler does NOT provide a default constructor**.
    - To allow both, we must explicitly define both constructors.
*/


// Single main() function to test all cases
int main() {
    std::cout << "Testing Implicit Default Constructor (Provided by Compiler):" << std::endl;
    test_implicit_default_constructor();
    std::cout << "----------------------------" << std::endl;

    std::cout << "Testing Explicitly Defined Default Constructor:" << std::endl;
    test_explicit_default_constructor();
    std::cout << "----------------------------" << std::endl;

    std::cout << "Testing Effect of Parameterized Constructor (Default Constructor Removal):" << std::endl;
    test_parameterized_constructor();
    std::cout << "----------------------------" << std::endl;

    std::cout << "Testing Constructor Overloading (Restoring Default Constructor):" << std::endl;
    test_constructor_overloading();
    std::cout << "----------------------------" << std::endl;

    return 0;
}